
p = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171
g = 11717829880366207009516117596335367088558084999998952205599979459063929499736583746670572176471460312928594829675428279466566527115212748467589894601965568
h = 3239475104050450443565264378728065788649097520952449527834792452971981976143292558073856937958553180532878928001494706097394108577585732452307673444020333

upper = 2**40
k = 2**20

def bin_pow(a, b, p):
    res = 1
    while (b > 0):
        if (b % 2 == 1):
            res = res * a % p
        a = a * a % p
        b >>= 1
    return res

X = 1
was = {}
for i in range(k):
    was[hash(X)] = i
    X = X * g % p

print("working..")

cur = 1
X = bin_pow(X, p - 2, p)
for i in range(k):
    x = h * cur % p
    if (hash(x) in was):
        print(i * k + was[hash(x)])
        break
    cur = cur * X % p

print("not found")

